CREATE TABLE customers (
    customer_id integer PRIMARY KEY,
    first_name varchar(100),
    last_name varchar(100),
    email varchar(100)
);

CREATE TABLE products (
    product_id integer PRIMARY KEY,
    product_name varchar(100),
    price decimal
);

CREATE TABLE orders (
    order_id integer PRIMARY KEY,
    customer_id integer,
    order_date date
);

CREATE TABLE order_items (
    order_id integer,
    product_id integer,
    quantity integer
);

INSERT INTO customers (customer_id, first_name, last_name, email) VALUES
(1, 'John', 'Doe', 'johndoe@email.com'),
(2, 'Jane', 'Smith', 'janesmith@email.com'),
(3, 'Bob', 'Johnson', 'bobjohnson@email.com'),
(4, 'Alice', 'Brown', 'alicebrown@email.com'),
(5, 'Charlie', 'Davis', 'charliedavis@email.com'),
(6, 'Eva', 'Fisher', 'evafisher@email.com'),
(7, 'George', 'Harris', 'georgeharris@email.com'),
(8, 'Ivy', 'Jones', 'ivyjones@email.com'),
(9, 'Kevin', 'Miller', 'kevinmiller@email.com'),
(10, 'Lily', 'Nelson', 'lilynelson@email.com'),
(11, 'Oliver', 'Patterson', 'oliverpatterson@email.com'),
(12, 'Quinn', 'Roberts', 'quinnroberts@email.com'),
(13, 'Sophia', 'Thomas', 'sophiathomas@email.com');

INSERT INTO products (product_id, product_name, price) VALUES
(1, 'Product A', 10.00),
(2, 'Product B', 15.00),
(3, 'Product C', 20.00),
(4, 'Product D', 25.00),
(5, 'Product E', 30.00),
(6, 'Product F', 35.00),
(7, 'Product G', 40.00),
(8, 'Product H', 45.00),
(9, 'Product I', 50.00),
(10, 'Product J', 55.00),
(11, 'Product K', 60.00),
(12, 'Product L', 65.00),
(13, 'Product M', 70.00);

INSERT INTO orders (order_id, customer_id, order_date) VALUES
(1, 1, '2023-05-01'),
(2, 2, '2023-05-02'),
(3, 3, '2023-05-03'),
(4, 1, '2023-05-04'),
(5, 2, '2023-05-05'),
(6, 3, '2023-05-06'),
(7, 4, '2023-05-07'),
(8, 5, '2023-05-08'),
(9, 6, '2023-05-09'),
(10, 7, '2023-05-10'),
(11, 8, '2023-05-11'),
(12, 9, '2023-05-12'),
(13, 10, '2023-05-13'),
(14, 11, '2023-05-14'),
(15, 12, '2023-05-15'),
(16, 13, '2023-05-16');

INSERT INTO order_items (order_id, product_id, quantity) VALUES
(1, 1, 2),
(1, 2, 1),
(2, 2, 1),
(2, 3, 3),
(3, 1, 1),
(3, 3, 2),
(4, 2, 4),
(4, 3, 1),
(5, 1, 1),
(5, 3, 2),
(6, 2, 3),
(6, 1, 1),
(7, 4, 1),
(7, 5, 2),
(8, 6, 3),
(8, 7, 1),
(9, 8, 2),
(9, 9, 1),
(10, 10, 3),
(10, 11, 2),
(11, 12, 1),
(11, 13, 3),
(12, 4, 2),
(12, 5, 1),
(13, 6, 3),
(13, 7, 2),
(14, 8, 1),
(14, 9, 2),
(15, 10, 3),
(15, 11, 1),
(16, 12, 2),
(16, 13, 3);

--Wanted to find the most expensive item that the store sells

SELECT MAX(price)
FROM products;

--checking my answer:
Select * from Products
Order by price DESC

--Wanted to know which customer has made the most orders, first I needed to see what the table looked like.
 Select *
 From orders

--Now, I need to know what the customers table looked like
Select * 
FROM customers;

--Will need to do a join on the customer id, those are the same in both tables
SELECT *
From customers c
JOIN
orders o
ON 
c.customer_id = o.order_id

-- initial join to see what the table looked like together, now need to select the top customer based on the most orders
-- used COUNT to count the order_ids and give that an alias, then grouped by name and id; order by desc to get the most orders 
-- at the top

SELECT c.first_name, c.last_name, COUNT(o.order_id) AS order_count
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
GROUP BY c.customer_id, c.first_name, c.last_name
ORDER BY order_count DESC

--Next I was looking to find the total revenue per products, so needed to preform an aggreagate function
--First need to see what that table looks like and where the data is, price is in the product table; and need to 
--find how many products were sold of each, which are in the orders items; so a inner join since we want revenue 
--of sold products.

SELECT *
from products;

SELECT *
from order_items; oi

--this joins the tables
SELECT * 
FROM products p
JOIN
order_items oi
ON
p.product_id = oi.product_id

--now to group them and do the multiplication

SELECT p.product_id, p.product_name, SUM(p.price * oi.quantity) AS Product_Revenue
FROM products p
JOIN order_items oi ON p.product_id = oi.product_id
GROUP BY p.product_id, p.product_name
ORDER BY product_revenue DESC;


----wanted to see what day had this highest sales. That information is located on three tables, 
--the dates are located in orders, the quantity
----is located in  order_items and the price is located in the product
--orders and product share a column and so do orders_item and orders

SELECT o.order_date, SUM(oi.quantity*p.price) as Total_Sales
FROM orders o
JOIN order_items oi 
ON
oi.order_id = o.order_id
JOIN
products p
ON 
oi.product_id = p.product_id
Group by o.order_date
Order by total_sales DESC

----now I want to find the first order by date for each customer; that 
----information is on the customers, and orders, they share the customer_id column; will use
--subquery and min 


SELECT c.customer_id, c.first_name, c.last_name, o.first_order_date
FROM Customers c
JOIN (
    SELECT customer_id, MIN(order_date) AS first_order_date
    FROM Orders
    GROUP BY customer_id
) AS o ON c.customer_id = o.customer_id;


--Now I want to find the customers who ordered the most distinct products,that
--information is found on the customers table and the order_items and the orders so
--two joins must be used. 


SELECT c.customer_id, c.first_name, c.last_name, COUNT(DISTINCT oi.product_id) AS distinct_product_count
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
JOIN order_items oi ON o.order_id = oi.order_id
GROUP BY c.customer_id, c.first_name, c.last_name
ORDER BY distinct_product_count DESC;

--want to see which product has been bought the least by quantity, two tables, grouped by product and ordered by quantity
--prodcut and order_items share product_id column; need to sum the quantity

SELECT p.product_name, SUM(oi.quantity) as total_quantity
FROM
Products p
JOIN
order_items oi
ON p.product_id = oi.product_id
GROUP BY P.product_name
ORDER BY total_quantity

--next, wanted to find the median order total, ZERO IDEA how to do this, had to get help online.
WITH ordered_totals AS (
  SELECT
    SUM(oi.quantity * p.price) AS total_order_amount,
    ROW_NUMBER() OVER (ORDER BY SUM(oi.quantity * p.price)) AS row_num,
    COUNT(*) OVER () AS total_rows
  FROM orders o
  JOIN order_items oi ON o.order_id = oi.order_id
  JOIN products p ON oi.product_id = p.product_id
  GROUP BY o.order_id
)
SELECT AVG(total_order_amount) AS median_order_total
FROM ordered_totals
WHERE row_num = CEIL(total_rows / 2.0);

--Wanted to classify orders using case statements. Orders over $300 above average,  average for over 100 and below average for everything else. 
--Data is located between three tables; products, order_items, and orders

SELECT o.order_id, 
       SUM(oi.quantity * p.price) AS total_order_amount,
       CASE
           WHEN SUM(oi.quantity * p.price) > 300 THEN 'Above Average'
           WHEN SUM(oi.quantity * p.price) > 100 THEN 'Average'
           ELSE 'Below Average'
       END AS order_classification
FROM orders o
JOIN order_items oi ON o.order_id = oi.order_id
JOIN products p ON oi.product_id = p.product_id
GROUP BY o.order_id
